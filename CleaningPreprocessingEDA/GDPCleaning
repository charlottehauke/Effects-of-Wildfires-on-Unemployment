{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"U5xYCHmOGS3v"},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tQvICrAaGWKH","executionInfo":{"status":"ok","timestamp":1730926224422,"user_tz":420,"elapsed":857,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"9a09c3b1-c835-4e03-e333-f0b2f565ef3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["GDP_OG = pd.read_csv('/content/drive/MyDrive/UnemploymentProject/OGDatasets/GDP_OG.csv')\n","GDP = GDP_OG.copy()\n","GDP.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"nxvyamxmGZ9C","executionInfo":{"status":"ok","timestamp":1730926224422,"user_tz":420,"elapsed":20,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"62443b4e-5936-41b4-e2f0-fa1ffe372875"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         DATE      GDP\n","0  1947-01-01  243.164\n","1  1947-04-01  245.968\n","2  1947-07-01  249.585\n","3  1947-10-01  259.745\n","4  1948-01-01  265.742"],"text/html":["\n","  <div id=\"df-f885b9ca-1140-4e41-bb3c-1ebd40086e23\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DATE</th>\n","      <th>GDP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1947-01-01</td>\n","      <td>243.164</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1947-04-01</td>\n","      <td>245.968</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1947-07-01</td>\n","      <td>249.585</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1947-10-01</td>\n","      <td>259.745</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1948-01-01</td>\n","      <td>265.742</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f885b9ca-1140-4e41-bb3c-1ebd40086e23')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f885b9ca-1140-4e41-bb3c-1ebd40086e23 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f885b9ca-1140-4e41-bb3c-1ebd40086e23');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a1049906-e97e-4073-920d-62a3b0fdcc48\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1049906-e97e-4073-920d-62a3b0fdcc48')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a1049906-e97e-4073-920d-62a3b0fdcc48 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"GDP","summary":"{\n  \"name\": \"GDP\",\n  \"rows\": 293,\n  \"fields\": [\n    {\n      \"column\": \"DATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 293,\n        \"samples\": [\n          \"1968-01-01\",\n          \"2012-01-01\",\n          \"1958-04-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6347.666888661198,\n        \"min\": 243.164,\n        \"max\": 21729.124,\n        \"num_unique_values\": 293,\n        \"samples\": [\n          909.387,\n          16019.758,\n          471.978\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["GDP.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ZsBVm8GIOYk","executionInfo":{"status":"ok","timestamp":1730926224423,"user_tz":420,"elapsed":18,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"e0728196-e26a-4223-a1d5-8b3178d47e98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 293 entries, 0 to 292\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   DATE    293 non-null    object \n"," 1   GDP     293 non-null    float64\n","dtypes: float64(1), object(1)\n","memory usage: 4.7+ KB\n"]}]},{"cell_type":"markdown","source":["##General"],"metadata":{"id":"w_9R_HqYHtuo"}},{"cell_type":"code","source":["GDP[\"DATE\"] = pd.to_datetime(GDP[\"DATE\"])\n","GDP[\"Year\"] = GDP[\"DATE\"].dt.year\n","GDP[\"Month\"] = GDP[\"DATE\"].dt.month\n","GDP = GDP.drop(\"DATE\",axis=1)\n","GDP = GDP[(GDP[\"Year\"]>1989) & (GDP[\"Year\"]<2017)]\n","GDP.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"amBlVRKFGqGV","executionInfo":{"status":"ok","timestamp":1730926224423,"user_tz":420,"elapsed":15,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"72ac5c0b-6c52-4e83-836c-c48b9da58189"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          GDP  Year  Month\n","172  5872.701  1990      1\n","173  5960.028  1990      4\n","174  6015.116  1990      7\n","175  6004.733  1990     10\n","176  6035.178  1991      1"],"text/html":["\n","  <div id=\"df-8d563452-c6b4-4802-a8e9-348a64ad48bc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GDP</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>172</th>\n","      <td>5872.701</td>\n","      <td>1990</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>5960.028</td>\n","      <td>1990</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>6015.116</td>\n","      <td>1990</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>6004.733</td>\n","      <td>1990</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>6035.178</td>\n","      <td>1991</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d563452-c6b4-4802-a8e9-348a64ad48bc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d563452-c6b4-4802-a8e9-348a64ad48bc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d563452-c6b4-4802-a8e9-348a64ad48bc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-48ae468f-a822-4470-a321-f971c8cbfd74\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-48ae468f-a822-4470-a321-f971c8cbfd74')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-48ae468f-a822-4470-a321-f971c8cbfd74 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"GDP","summary":"{\n  \"name\": \"GDP\",\n  \"rows\": 108,\n  \"fields\": [\n    {\n      \"column\": \"GDP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3945.011185732188,\n        \"min\": 5872.701,\n        \"max\": 18991.883,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          14352.85,\n          6566.641,\n          6035.178\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          1998,\n          2003,\n          1999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["GDP.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqgk4pxUM0g8","executionInfo":{"status":"ok","timestamp":1730926224423,"user_tz":420,"elapsed":13,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"f2ad2f06-2085-40ea-b5c0-f497f389d0b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 108 entries, 172 to 279\n","Data columns (total 3 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   GDP     108 non-null    float64\n"," 1   Year    108 non-null    int32  \n"," 2   Month   108 non-null    int32  \n","dtypes: float64(1), int32(2)\n","memory usage: 2.5 KB\n"]}]},{"cell_type":"code","source":["GDP[\"Year\"].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6HtR-QVLI_ZL","executionInfo":{"status":"ok","timestamp":1730926224555,"user_tz":420,"elapsed":143,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"be9d0bfa-d2b4-42ea-d771-9e63f5a1a30d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n","       2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n","       2012, 2013, 2014, 2015, 2016], dtype=int32)"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["GDP[\"Month\"].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LfwCpu2VKONm","executionInfo":{"status":"ok","timestamp":1730926224556,"user_tz":420,"elapsed":6,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"34df5b0a-dbb2-4d71-e7fb-3d9ecd8aebcb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1,  4,  7, 10], dtype=int32)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["new_GDP = GDP.copy()\n","for index,row in GDP.iterrows():\n","    year = row['Year']\n","    gdp_value = row['GDP']\n","    month = row['Month']\n","    month=int(month)\n","    for i in range(month+1,month+3):\n","        new_row = pd.DataFrame({'Year': [year], 'Month': [i], 'GDP': [gdp_value]})\n","        new_GDP = pd.concat([new_GDP,new_row])\n","GDP = new_GDP"],"metadata":{"id":"mo68g7V6K0nm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["GDP = GDP.sort_values(by=[\"Year\",\"Month\"])\n","GDP = GDP.reset_index(drop=True)\n","GDP[\"Year\"] = GDP[\"Year\"].astype(int)\n","GDP.head(20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"GJfcBRbPMrQt","executionInfo":{"status":"ok","timestamp":1730926282556,"user_tz":420,"elapsed":318,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"e87386c8-5998-4c89-bf3b-ac187c02e951"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         GDP  Year  Month\n","0   5872.701  1990      1\n","1   5872.701  1990      2\n","2   5872.701  1990      3\n","3   5960.028  1990      4\n","4   5960.028  1990      5\n","5   5960.028  1990      6\n","6   6015.116  1990      7\n","7   6015.116  1990      8\n","8   6015.116  1990      9\n","9   6004.733  1990     10\n","10  6004.733  1990     11\n","11  6004.733  1990     12\n","12  6035.178  1991      1\n","13  6035.178  1991      2\n","14  6035.178  1991      3\n","15  6126.862  1991      4\n","16  6126.862  1991      5\n","17  6126.862  1991      6\n","18  6205.937  1991      7\n","19  6205.937  1991      8"],"text/html":["\n","  <div id=\"df-20048dd9-276d-48a1-a42d-eea993ab6381\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GDP</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5872.701</td>\n","      <td>1990</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5872.701</td>\n","      <td>1990</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5872.701</td>\n","      <td>1990</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5960.028</td>\n","      <td>1990</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5960.028</td>\n","      <td>1990</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5960.028</td>\n","      <td>1990</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6015.116</td>\n","      <td>1990</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6015.116</td>\n","      <td>1990</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>6015.116</td>\n","      <td>1990</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>6004.733</td>\n","      <td>1990</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>6004.733</td>\n","      <td>1990</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>6004.733</td>\n","      <td>1990</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>6035.178</td>\n","      <td>1991</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>6035.178</td>\n","      <td>1991</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>6035.178</td>\n","      <td>1991</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>6126.862</td>\n","      <td>1991</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>6126.862</td>\n","      <td>1991</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>6126.862</td>\n","      <td>1991</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>6205.937</td>\n","      <td>1991</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>6205.937</td>\n","      <td>1991</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20048dd9-276d-48a1-a42d-eea993ab6381')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-20048dd9-276d-48a1-a42d-eea993ab6381 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-20048dd9-276d-48a1-a42d-eea993ab6381');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bfeca161-a6d7-4116-8201-4294cbff646c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bfeca161-a6d7-4116-8201-4294cbff646c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bfeca161-a6d7-4116-8201-4294cbff646c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"GDP","summary":"{\n  \"name\": \"GDP\",\n  \"rows\": 324,\n  \"fields\": [\n    {\n      \"column\": \"GDP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932.778563458911,\n        \"min\": 5872.701,\n        \"max\": 18991.883,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          14352.85,\n          6566.641,\n          6035.178\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1990,\n        \"max\": 2016,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          1998,\n          2003,\n          1999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["GDP.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"O7mV6LEnOsHz","executionInfo":{"status":"ok","timestamp":1730926320349,"user_tz":420,"elapsed":150,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"12f61fbe-2740-4cb0-d679-8f007c08475a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                GDP         Year       Month\n","count    324.000000   324.000000  324.000000\n","mean   11839.344991  2003.000000    6.500000\n","std     3932.778563     7.800929    3.457392\n","min     5872.701000  1990.000000    1.000000\n","25%     8227.680250  1996.000000    3.750000\n","50%    11440.100500  2003.000000    6.500000\n","75%    14857.914750  2010.000000    9.250000\n","max    18991.883000  2016.000000   12.000000"],"text/html":["\n","  <div id=\"df-10e48beb-560d-4c28-af36-7d0459f63c19\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>GDP</th>\n","      <th>Year</th>\n","      <th>Month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","      <td>324.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>11839.344991</td>\n","      <td>2003.000000</td>\n","      <td>6.500000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3932.778563</td>\n","      <td>7.800929</td>\n","      <td>3.457392</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>5872.701000</td>\n","      <td>1990.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>8227.680250</td>\n","      <td>1996.000000</td>\n","      <td>3.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>11440.100500</td>\n","      <td>2003.000000</td>\n","      <td>6.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>14857.914750</td>\n","      <td>2010.000000</td>\n","      <td>9.250000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>18991.883000</td>\n","      <td>2016.000000</td>\n","      <td>12.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10e48beb-560d-4c28-af36-7d0459f63c19')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-10e48beb-560d-4c28-af36-7d0459f63c19 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-10e48beb-560d-4c28-af36-7d0459f63c19');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-42f470d7-f553-4662-8ab0-99a6e047a552\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-42f470d7-f553-4662-8ab0-99a6e047a552')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-42f470d7-f553-4662-8ab0-99a6e047a552 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"GDP\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"GDP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6070.722146582402,\n        \"min\": 324.0,\n        \"max\": 18991.883,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11839.34499074074,\n          11440.1005,\n          324.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 854.6368470257786,\n        \"min\": 7.800928737277805,\n        \"max\": 2016.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          324.0,\n          2003.0,\n          2010.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.45996178267285,\n        \"min\": 1.0,\n        \"max\": 324.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          324.0,\n          6.5,\n          9.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["GDP.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5t3rjD5SP5mF","executionInfo":{"status":"ok","timestamp":1730926329415,"user_tz":420,"elapsed":148,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"52dea3cf-297f-4dbe-d7b7-93ebf7558db7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 324 entries, 0 to 323\n","Data columns (total 3 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   GDP     324 non-null    float64\n"," 1   Year    324 non-null    int64  \n"," 2   Month   324 non-null    int64  \n","dtypes: float64(1), int64(2)\n","memory usage: 7.7 KB\n"]}]},{"cell_type":"code","source":["#GDP.to_csv(\"/content/drive/MyDrive/UnemploymentProject/CleanDatasets/GDP_clean.csv\", index=False)"],"metadata":{"id":"yZGtCDeCP7zv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Visualizations"],"metadata":{"id":"Wg7HhwvcQWMe"}},{"cell_type":"code","source":["x = GDP.groupby(\"Year\")[\"GDP\"].mean()\n","plt.plot(x.index,x)\n","plt.title(\"Year vs Average Annual GDP\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"9ZWbH82XQRoU","executionInfo":{"status":"ok","timestamp":1730926852860,"user_tz":420,"elapsed":592,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"e3f74522-b92c-407c-f7ee-457f3d533305"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Year vs Average Annual GDP')"]},"metadata":{},"execution_count":74},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.hist(GDP[\"GDP\"])\n","plt.title(\"GDP\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"QVk7QJswRJzl","executionInfo":{"status":"ok","timestamp":1730926895451,"user_tz":420,"elapsed":362,"user":{"displayName":"Charlotte Hauke","userId":"15045251876913557893"}},"outputId":"e690c686-56f9-44f1-9f39-1a0b8eb24919"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'GDP')"]},"metadata":{},"execution_count":76},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"qQkplU-VSBlp"},"execution_count":null,"outputs":[]}]}